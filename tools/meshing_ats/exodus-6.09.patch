diff -Naur exodus-6.09/exodus/cbind/CMakeLists.txt exodus-6.09-patched/exodus/cbind/CMakeLists.txt
--- exodus-6.09/exodus/cbind/CMakeLists.txt	2014-10-15 14:20:05.000000000 -0600
+++ exodus-6.09-patched/exodus/cbind/CMakeLists.txt	2016-03-08 12:50:09.000000000 -0700
@@ -15,6 +15,7 @@
 	src/ex_conv.c
 	src/ex_copy.c
 	src/ex_create.c
+	src/ex_create_group.c
 	src/ex_cvt_nodes_to_sides.c
 	src/ex_err.c
 	src/ex_get_all_times.c
@@ -48,6 +49,8 @@
 	src/ex_get_entity_count_per_polyhedra.c
 	src/ex_get_glob_var_time.c
 	src/ex_get_glob_vars.c
+	src/ex_get_group_id.c
+	src/ex_get_group_ids.c
 	src/ex_get_id_map.c
 	src/ex_get_ids.c
 	src/ex_get_info.c
diff -Naur exodus-6.09/exodus/exodus.py.in exodus-6.09-patched/exodus/exodus.py.in
--- exodus-6.09/exodus/exodus.py.in	2014-10-15 14:20:05.000000000 -0600
+++ exodus-6.09-patched/exodus/exodus.py.in	2016-03-08 12:50:09.000000000 -0700
@@ -56,7 +56,7 @@
   Parse the exodusII.h header file and return the version number or 0 if not
   found.
   """
-  for line in open(getAccessPath() + '/inc/exodusII.h'):
+  for line in open(getAccessPath() + '/include/exodusII.h'):
     fields = line.split()
     if (len(fields) == 3 and
         fields[0] == '#define' and
@@ -216,27 +216,51 @@
   # none found, must be invalid`
   return -1 ##EX_INVALID
 
+# init params struct
+class ex_init_params(Structure):
+  _fields_ = [("title", c_char*(MAX_LINE_LENGTH+1)),
+              ("num_dim", c_longlong),
+              ("num_nodes", c_longlong),
+              ("num_edge", c_longlong),
+              ("num_edge_blk", c_longlong),
+              ("num_face", c_longlong),
+              ("num_face_blk", c_longlong),
+              ("num_elem", c_longlong),
+              ("num_elem_blk", c_longlong),
+              ("num_node_sets", c_longlong),
+              ("num_edge_sets", c_longlong),
+              ("num_face_sets", c_longlong),
+              ("num_side_sets", c_longlong),
+              ("num_elem_sets", c_longlong),
+              ("num_node_maps", c_longlong),
+              ("num_edge_maps", c_longlong),
+              ("num_face_maps", c_longlong),
+              ("num_elem_maps", c_longlong)]
+
+
 # Class definition
 
 class exodus:
   """
+  Usage:
     e = exodus('file.e',mode='r') -> open existing exodus file for data extraction
     e = exodus('file.e',mode='r',array_type='numpy') -> open existing exodus file for data 
         extraction using numpy arrays
     e = exodus('file.e',mode='a') -> open existing exodus file for data insertion/extraction
+
+  Usage writing:
+    # see ex_init_params data structure for more optional arguments
+    ex_pars = ex_init_params(num_dim=numDims,num_nodes=numNodes,
+                            num_elems=numElems, num_elem_blk=numElemBlocks) 
     e = exodus('file.e',mode='w',title=title,
                arrayType=ctype,
-               numDims=numDims,numNodes=numNodes
-               numElems=numElems,numBlocks=numBlocks,
-               numNodeSets=numNodeSets,
-               numSideSets=numSideSets) -> open new exodus file for data insertion
+               init_params=ex_pars) -> open new exodus file for data insertion
   """
   
   # --------------------------------------------------------------------
 
-  def __init__(self,file,mode=None,array_type='ctype',title=None,numDims=None,
-               numNodes=None,numElems=None,numBlocks=None,
-               numNodeSets=None,numSideSets=None,io_size=0):
+  def __init__(self,file,mode=None,array_type='ctype',
+               init_params=None, io_size=0):
     print EXODUS_PY_COPYRIGHT
     if mode == None:
       mode = 'r'
@@ -258,10 +282,9 @@
     self.modeChar = mode
     self.__open(io_size=io_size)
     if mode.lower() == 'w':
-      info = [title,numDims,numNodes,numElems,numBlocks,
-              numNodeSets,numSideSets]
-      assert None not in info
-      self.__ex_put_info(info)
+      assert(init_params is not None)
+      self.init_params = init_params
+      self.put_info_ext(init_params)
       self.numTimes = c_int(0)
     else:
       self.__ex_get_info()
@@ -1806,7 +1829,7 @@
     return values
 
   # --------------------------------------------------------------------
-
+  
   def close(self):
     """ 
       e.close() -> close the exodus file.
@@ -2803,7 +2826,89 @@
     EXODUS_LIB.ex_update(self.fileId)
     return True
 
-# --------------------------------------------------------------------
+  # --------------------------------------------------------------------
+  # ADDED BY ETC
+  # --------------------------------------------------------------------
+  def put_info_ext(self,p):
+    """
+      e.put_info_ext(self,info_struct)
+      -> put initialization information into exodus file
+    """
+    self.Title       = create_string_buffer(p.title,MAX_LINE_LENGTH+1)
+    self.numDim      = c_longlong(p.num_dim)
+    self.numNodes    = c_longlong(p.num_nodes)
+    self.numElem     = c_longlong(p.num_elem)
+    self.numElemBlk  = c_longlong(p.num_elem_blk)
+    self.numNodeSets = c_longlong(p.num_node_sets)
+    self.numSideSets = c_longlong(p.num_side_sets)
+
+    EXODUS_LIB.ex_put_init_ext(self.fileId, byref(p))
+    return True
+
+  def put_polyhedra_elem_blk(self, blkID,
+                             num_elems_this_blk,
+                             num_faces_per_elem,
+                             num_attr_per_elem):
+    ebType = ex_entity_type("EX_ELEM_BLOCK")
+    
+    EXODUS_LIB.ex_put_block(self.fileId,ebType,c_int(blkID),
+                            create_string_buffer("NFACED"),
+                            c_longlong(num_elems_this_blk),
+                            c_longlong(0),
+                            c_longlong(0),
+                            c_longlong(num_faces_per_elem),
+                            c_longlong(num_attr_per_elem))
+    return True
+
+  def put_polyhedra_face_blk(self, blkID,
+                             num_faces_this_blk,
+                             num_nodes_per_face,
+                             num_attr_per_face):
+    fbType = ex_entity_type("EX_FACE_BLOCK")
+
+    
+    EXODUS_LIB.ex_put_block(self.fileId,fbType,c_int(blkID),
+                            create_string_buffer("NSIDED"),
+                            c_longlong(num_faces_this_blk),
+                            c_longlong(num_nodes_per_face),
+                            c_longlong(0),
+                            c_longlong(0),
+                            c_longlong(num_attr_per_face))
+    return True
+
+  def put_face_count_per_polyhedra(self,blkID,entityCounts):
+    ebType = ex_entity_type("EX_ELEM_BLOCK")
+    entity_counts = (c_int * len(entityCounts))()
+    entity_counts[:] = entityCounts
+    EXODUS_LIB.ex_put_entity_count_per_polyhedra(self.fileId,ebType,
+                                                 c_int(blkID),entity_counts)
+    return True
+
+  def put_node_count_per_face(self,blkID,entityCounts):
+    ebType = ex_entity_type("EX_FACE_BLOCK")
+    entity_counts = (c_int * len(entityCounts))()
+    entity_counts[:] = entityCounts
+    EXODUS_LIB.ex_put_entity_count_per_polyhedra(self.fileId,ebType,
+                                                 c_int(blkID),entity_counts)
+    return True
+  
+  def put_elem_face_conn(self,blkId,elemFaceConn):
+    ebType = ex_entity_type("EX_ELEM_BLOCK")
+    elem_face_conn = (c_int * len(elemFaceConn))()
+    elem_face_conn[:] = elemFaceConn
+    EXODUS_LIB.ex_put_conn(self.fileId, ebType, c_int(blkId),
+                           None, None, elem_face_conn)
+    return True
+
+  def put_face_node_conn(self,blkId,nodeConn):
+    ebType = ex_entity_type("EX_FACE_BLOCK")
+    node_conn = (c_int * len(nodeConn))()
+    node_conn[:] = nodeConn
+    EXODUS_LIB.ex_put_conn(self.fileId, ebType, c_int(blkId),
+                           node_conn, None, None)
+    return True
+  
+  # --------------------------------------------------------------------
 # Utility Functions
 # --------------------------------------------------------------------
 
@@ -3347,3 +3452,9 @@
         self.warnings.simplefilter('ignore')
         np_array = self.np.ctypeslib.as_array(c_array)
     return(np_array)
+
+# def ctype_int64_t(self, int64):
+#   if (EXODUS_LIB.ex_int64_status(self.fileId) & EX_BULK_INT64_API):
+#     return c_longlong(int64)
+#   else:
+#     return c_int(int64)
